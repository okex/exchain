@startuml

hide empty members
interface Application{
~Info(RequestInfo) ResponseInfo
~SetOption(RequestSetOption) ResponseSetOption
~Query(RequestQuery) ResponseQuery

~CheckTx(RequestCheckTx) ResponseCheckTx

~InitChain(RequestInitChain) ResponseInitChain
~BeginBlock(RequestBeginBlock) ResponseBeginBlock
~DeliverTx(RequestDeliverTx) ResponseDeliverTx
~EndBlock(RequestEndBlock) ResponseEndBlock
~Commit() ResponseCommit
}


class "InitChain(RequestInitChain) ResponseInitChain" as M1 << (M,orchid)>>



interface Service {
	~Start() error
	~OnStart() error

	~Stop() error
	~OnStop()

	~Reset() error
	~OnReset() error

	~IsRunning() bool

	~Quit() <-chan struct{}

	~String() string

	~SetLogger(log.Logger)
}



class BaseService{
        Logger  log.Logger
    	name    string
    	started uint32 // atomic
    	stopped uint32 // atomic
    	quit    chan struct{}

    	// The "subclass" of BaseService
    	impl Service
}



class "func (*Node) OnStart() error" as M5 << (M,orchid)>>
class "func (*BaseService) Start() error" as M6 << (M,orchid)>>

class Node {
    cmn.BaseService

	// config
	config        *cfg.Config
	genesisDoc    *types.GenesisDoc
	privValidator types.PrivValidator

	// network
	transport   *p2p.MultiplexTransport
	sw          *p2p.Switch
	addrBook    pex.AddrBook
	nodeInfo    p2p.NodeInfo
	nodeKey     *p2p.NodeKey
	isListening bool

	// services
	eventBus         *types.EventBus
	stateDB          dbm.DB
	blockStore       *store.BlockStore
	bcReactor        p2p.Reactor
	mempoolReactor   *mempl.Reactor
	mempool          mempl.Mempool
	consensusState   *cs.ConsensusState
	consensusReactor *cs.ConsensusReactor
	pexReactor       *pex.PEXReactor
	evidencePool     *evidence.EvidencePool
	proxyApp         proxy.AppConns
	rpcListeners     []net.Listener
	txIndexer        txindex.TxIndexer
	indexerService   *txindex.IndexerService
	prometheusSrv    *http.Server
}

annotation "命令行执行okexchaind start" as A1

class "func startInProcess(*Context, *codec.Codec, AppCreator,func(*lcd.RestServer)) (*node.Node, error)" as M7 << (M,orchid)>>
class "func NewNode(*cfg.Config,types.PrivValidator,*p2p.NodeKey,proxy.ClientCreator,\nGenesisDocProvider,DBProvider,MetricsProvider,logger log.Logger,...Option) (*Node, error)" as M8 << (M,orchid)>>

class "func createAndStartProxyAppConns(proxy.ClientCreator, log.Logger) (proxy.AppConns, error)" as M9 << (M,orchid)>>

interface AppConns {
	cmn.Service

	~Mempool() AppConnMempool
	~Consensus() AppConnConsensus
	~Query() AppConnQuery
}

class multiAppConn {
	cmn.BaseService

	mempoolConn   *appConnMempool
	consensusConn *appConnConsensus
	queryConn     *appConnQuery

	clientCreator ClientCreator
	~OnStart() error
}
note right:multiAppConn是appConns接口的具体实现类\n并统一管理他们底层的客户端(mempool,consensus和query)

class  Handshaker {
      	stateDB      dbm.DB
      	initialState sm.State
      	store        sm.BlockStore
      	eventBus     types.BlockEventPublisher
      	genDoc       *types.GenesisDoc
      	logger       log.Logger

      	nBlocks int // number of blocks applied to the state
      	~Handshake(proxy.AppConns) error
      }
class "func doHandshake(dbm.DB, sm.State, sm.BlockStore,*types.GenesisDoc,*types.EventBus,proxy.AppConns,log.Logger) error" as M10 << (M,orchid)>>
class "func (*Handshaker) Handshake(proxy.AppConns) error" as M11 << (M,orchid)>>
class "func (*multiAppConn) OnStart() error" as M12 << (M,orchid)>>
class "mempoolConn   *appConnMempool" as M13 << (F,orange)>>
class "consensusConn  *appConnConsensus" as M14 << (F,orange)>>
class "queryConn  *appConnQuery" as M15 << (F,orange)>>
annotation "共识模块/交易池模块/查询模块与cosmos-SDK产生连接" as A2

interface Client  {
	cmn.Service

	SetResponseCallback(Callback)
	Error() error

	FlushAsync() *ReqRes
	EchoAsync(msg string) *ReqRes
	InfoAsync(types.RequestInfo) *ReqRes
	SetOptionAsync(types.RequestSetOption) *ReqRes
	DeliverTxAsync(types.RequestDeliverTx) *ReqRes
	CheckTxAsync(types.RequestCheckTx) *ReqRes
	QueryAsync(types.RequestQuery) *ReqRes
	CommitAsync() *ReqRes
	InitChainAsync(types.RequestInitChain) *ReqRes
	BeginBlockAsync(types.RequestBeginBlock) *ReqRes
	EndBlockAsync(types.RequestEndBlock) *ReqRes

	FlushSync() error
	EchoSync(msg string) (*types.ResponseEcho, error)
	InfoSync(types.RequestInfo) (*types.ResponseInfo, error)
	SetOptionSync(types.RequestSetOption) (*types.ResponseSetOption, error)
	DeliverTxSync(types.RequestDeliverTx) (*types.ResponseDeliverTx, error)
	CheckTxSync(types.RequestCheckTx) (*types.ResponseCheckTx, error)
	QuerySync(types.RequestQuery) (*types.ResponseQuery, error)
	CommitSync() (*types.ResponseCommit, error)
	InitChainSync(types.RequestInitChain) (*types.ResponseInitChain, error)
	BeginBlockSync(types.RequestBeginBlock) (*types.ResponseBeginBlock, error)
	EndBlockSync(types.RequestEndBlock) (*types.ResponseEndBlock, error)
}
note top:abci客户端接口

class localClient {
	cmn.BaseService

	mtx *sync.Mutex
	types.Application
	Callback
	~DeliverTxSync/Async(types.RequestDeliverTx)(*types.ResponseDeliverTx, error)
	~CheckTxSync/Async(types.RequestCheckTx) (*types.ResponseCheckTx, error)
	~QuerySync/Async(types.RequestQuery) (*types.ResponseQuery, error)
	~CommitSync/Async() (*types.ResponseCommit, error)
	~InitChainSync/Async(types.RequestInitChain) (*types.ResponseInitChain, error)
	~BeginBlockSync/Async(types.RequestBeginBlock) (*types.ResponseBeginBlock, error)
	~EndBlockSync/Async(types.RequestEndBlock) (*types.ResponseEndBlock, error)
	~...()
}
note left:实质为abci中的客户端(同进程)

interface AppConnConsensus  {
	~InitChainSync(types.RequestInitChain) (*types.ResponseInitChain, error)
	~BeginBlockSync(types.RequestBeginBlock) (*types.ResponseBeginBlock, error)
	~DeliverTxAsync(types.RequestDeliverTx) *abcicli.ReqRes
	~EndBlockSync(types.RequestEndBlock) (*types.ResponseEndBlock, error)
	~CommitSync() (*types.ResponseCommit, error)
	~...()
}

interface AppConnMempool  {
	~CheckTxAsync(types.RequestCheckTx) *abcicli.ReqRes
	~...()

}

interface AppConnQuery  {
	~InfoSync(types.RequestInfo) (*types.ResponseInfo, error)
	~QuerySync(types.RequestQuery) (*types.ResponseQuery, error)
	~...()
}

annotation "执行步骤：\n1.调用app.Info获取上层app信息;\n2.重新执行本地区块到上层app返回的height，同步本地的state\n(如果appBlockHeight为0，则调用app.Init方法)" as A3

annotation "执行步骤：\n1.增添peer黑名单;\n2.启动rpc server;\n3.启动p2p server\n4.与peer保持永久连接" as A4

class "func StartRestServer(*codec.Codec, func(*RestServer), *node.Node, string) error" as M2 << M,orchid)>>


M1 <--* Application




Service <|-- BaseService:实现


BaseService <|-- Node:继承
M6 <--* BaseService
M6 <--* Node

A4 <.. M5
M5 <-- M6
M6 <-- M7:创建app和节点并调用Node.Start()
M7 <-- A1:调用
M8 <-- M7:调用，创建节点
M9 <-- M8:调用

Service <|-- AppConns:继承

AppConns <|-- multiAppConn:实现
BaseService <|-- multiAppConn:继承
M13 <--* multiAppConn:交易池模块client
M14 <--* multiAppConn:共识模块client
M15 <--* multiAppConn:查询模块client

multiAppConn <.. M9:可以理解为app创建客户端\n（与Node中的abci服务端交互）

M10 <-- M8:调用，
Handshaker <-- M10:创建
M11 <--* Handshaker

M12 <-- multiAppConn:为query，mempool和consensus\n分别创建三个client,并启动

Client <|-- localClient:实现
BaseService <|-- localClient:继承

M13 <.. M12:创建client
M14 <.. M12:创建client
M15 <.. M12:创建client

AppConnMempool <|-- M13:实现
localClient <.. AppConnMempool:子集
AppConnConsensus <|-- M14:实现
localClient <.. AppConnConsensus:子集
AppConnQuery <|-- M15:实现
localClient <.. AppConnQuery:子集


A2 <-- AppConnMempool:调用
A2 <-- AppConnConsensus:调用
A2 <-- AppConnQuery:调用

Application <-- A2

A3 <.. M11

M2 <-- M7:启动rest server
@enduml

