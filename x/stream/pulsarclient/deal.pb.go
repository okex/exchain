//// Code generated by protoc-gen-go. DO NOT EDIT.
//// source: deal.proto
//
package pulsarclient

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MatchResultMsg struct {
	BizType              *int32   `protobuf:"varint,1,req,name=bizType" json:"bizType,omitempty"`
	MarketId             *int64   `protobuf:"varint,2,req,name=marketId" json:"marketId,omitempty"`
	MarketType           *int32   `protobuf:"varint,3,req,name=marketType" json:"marketType,omitempty"`
	Size                 *float64 `protobuf:"fixed64,4,req,name=size" json:"size,omitempty"`
	Price                *float64 `protobuf:"fixed64,5,req,name=price" json:"price,omitempty"`
	CreatedTime          *int64   `protobuf:"varint,6,req,name=createdTime" json:"createdTime,omitempty"`
	UserId               *int64   `protobuf:"varint,7,opt,name=userId" json:"userId,omitempty"`
	BrokerId             *int32   `protobuf:"varint,8,opt,name=brokerId" json:"brokerId,omitempty"`
	OrderId              *uint64  `protobuf:"fixed64,9,opt,name=orderId" json:"orderId,omitempty"`
	InstrumentId         *int64   `protobuf:"varint,10,opt,name=instrument_id,json=instrumentId" json:"instrument_id,omitempty"`
	InstrumentName       *string  `protobuf:"bytes,11,opt,name=instrument_name,json=instrumentName" json:"instrument_name,omitempty"`
	TradeId              *int64   `protobuf:"varint,12,opt,name=tradeId" json:"tradeId,omitempty"`
	Tradeside            *int32   `protobuf:"varint,13,opt,name=tradeside" json:"tradeside,omitempty"`
	OppositeUserId       *int64   `protobuf:"varint,14,opt,name=oppositeUserId" json:"oppositeUserId,omitempty"`
	OppositeBrokerId     *int32   `protobuf:"varint,15,opt,name=oppositeBrokerId" json:"oppositeBrokerId,omitempty"`
	OppositeOrderId      *uint64  `protobuf:"fixed64,16,opt,name=oppositeOrderId" json:"oppositeOrderId,omitempty"`
	OrderSide            *int32   `protobuf:"varint,17,opt,name=orderSide" json:"orderSide,omitempty"`
	EventId              *int64   `protobuf:"varint,18,opt,name=eventId" json:"eventId,omitempty"`
	EventType            *int32   `protobuf:"varint,19,opt,name=eventType" json:"eventType,omitempty"`
	IsCalc               *bool    `protobuf:"varint,20,req,name=isCalc" json:"isCalc,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MatchResultMsg) Reset()         { *m = MatchResultMsg{} }
func (m *MatchResultMsg) String() string { return proto.CompactTextString(m) }
func (*MatchResultMsg) ProtoMessage()    {}
func (*MatchResultMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_deal_0fd2dc600cb158db, []int{0}
}
func (m *MatchResultMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MatchResultMsg.Unmarshal(m, b)
}
func (m *MatchResultMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MatchResultMsg.Marshal(b, m, deterministic)
}
func (dst *MatchResultMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchResultMsg.Merge(dst, src)
}
func (m *MatchResultMsg) XXX_Size() int {
	return xxx_messageInfo_MatchResultMsg.Size(m)
}
func (m *MatchResultMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchResultMsg.DiscardUnknown(m)
}

var xxx_messageInfo_MatchResultMsg proto.InternalMessageInfo

func (m *MatchResultMsg) GetBizType() int32 {
	if m != nil && m.BizType != nil {
		return *m.BizType
	}
	return 0
}

func (m *MatchResultMsg) GetMarketId() int64 {
	if m != nil && m.MarketId != nil {
		return *m.MarketId
	}
	return 0
}

func (m *MatchResultMsg) GetMarketType() int32 {
	if m != nil && m.MarketType != nil {
		return *m.MarketType
	}
	return 0
}

func (m *MatchResultMsg) GetSize() float64 {
	if m != nil && m.Size != nil {
		return *m.Size
	}
	return 0
}

func (m *MatchResultMsg) GetPrice() float64 {
	if m != nil && m.Price != nil {
		return *m.Price
	}
	return 0
}

func (m *MatchResultMsg) GetCreatedTime() int64 {
	if m != nil && m.CreatedTime != nil {
		return *m.CreatedTime
	}
	return 0
}

func (m *MatchResultMsg) GetUserId() int64 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *MatchResultMsg) GetBrokerId() int32 {
	if m != nil && m.BrokerId != nil {
		return *m.BrokerId
	}
	return 0
}

func (m *MatchResultMsg) GetOrderId() uint64 {
	if m != nil && m.OrderId != nil {
		return *m.OrderId
	}
	return 0
}

func (m *MatchResultMsg) GetInstrumentId() int64 {
	if m != nil && m.InstrumentId != nil {
		return *m.InstrumentId
	}
	return 0
}

func (m *MatchResultMsg) GetInstrumentName() string {
	if m != nil && m.InstrumentName != nil {
		return *m.InstrumentName
	}
	return ""
}

func (m *MatchResultMsg) GetTradeId() int64 {
	if m != nil && m.TradeId != nil {
		return *m.TradeId
	}
	return 0
}

func (m *MatchResultMsg) GetTradeside() int32 {
	if m != nil && m.Tradeside != nil {
		return *m.Tradeside
	}
	return 0
}

func (m *MatchResultMsg) GetOppositeUserId() int64 {
	if m != nil && m.OppositeUserId != nil {
		return *m.OppositeUserId
	}
	return 0
}

func (m *MatchResultMsg) GetOppositeBrokerId() int32 {
	if m != nil && m.OppositeBrokerId != nil {
		return *m.OppositeBrokerId
	}
	return 0
}

func (m *MatchResultMsg) GetOppositeOrderId() uint64 {
	if m != nil && m.OppositeOrderId != nil {
		return *m.OppositeOrderId
	}
	return 0
}

func (m *MatchResultMsg) GetOrderSide() int32 {
	if m != nil && m.OrderSide != nil {
		return *m.OrderSide
	}
	return 0
}

func (m *MatchResultMsg) GetEventId() int64 {
	if m != nil && m.EventId != nil {
		return *m.EventId
	}
	return 0
}

func (m *MatchResultMsg) GetEventType() int32 {
	if m != nil && m.EventType != nil {
		return *m.EventType
	}
	return 0
}

func (m *MatchResultMsg) GetIsCalc() bool {
	if m != nil && m.IsCalc != nil {
		return *m.IsCalc
	}
	return false
}

func init() {
	proto.RegisterType((*MatchResultMsg)(nil), "stream2.pulsarclient.MatchResultMsg")
}

func init() { proto.RegisterFile("deal.proto", fileDescriptor_deal_0fd2dc600cb158db) }

var fileDescriptor_deal_0fd2dc600cb158db = []byte{
	// 367 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0xdd, 0x8a, 0x14, 0x31,
	0x10, 0x85, 0xe9, 0x9e, 0x9f, 0x9d, 0xa9, 0x9d, 0xed, 0x59, 0xcb, 0x45, 0x82, 0x88, 0x04, 0x05,
	0x0d, 0x5e, 0xf8, 0x10, 0x7a, 0xd5, 0x17, 0xab, 0x10, 0xd7, 0x6b, 0xc9, 0x76, 0x0a, 0x0d, 0xdb,
	0x7f, 0x24, 0x69, 0xc1, 0x7d, 0x6c, 0x9f, 0x40, 0x52, 0xfd, 0x33, 0xc3, 0x7a, 0x57, 0xe7, 0xeb,
	0x3e, 0x95, 0x73, 0x12, 0x00, 0x4b, 0xa6, 0xfe, 0xd8, 0xfb, 0x2e, 0x76, 0x78, 0xe8, 0x87, 0x3a,
	0x18, 0x5f, 0xd5, 0x8e, 0xda, 0xf8, 0xe6, 0xef, 0x1a, 0x8a, 0x5b, 0x13, 0xab, 0x5f, 0x9a, 0xc2,
	0x50, 0xc7, 0xdb, 0xf0, 0x13, 0x05, 0x5c, 0xdc, 0xbb, 0xc7, 0xbb, 0x3f, 0x3d, 0x89, 0x4c, 0xe6,
	0x6a, 0xa3, 0x67, 0x89, 0x2f, 0x61, 0xd7, 0x18, 0xff, 0x40, 0xb1, 0xb4, 0x22, 0x97, 0xb9, 0x5a,
	0xe9, 0x45, 0xe3, 0x6b, 0x80, 0x71, 0x66, 0xe3, 0x8a, 0x8d, 0x67, 0x04, 0x11, 0xd6, 0xc1, 0x3d,
	0x92, 0x58, 0xcb, 0x5c, 0x65, 0x9a, 0x67, 0xbc, 0x81, 0x4d, 0xef, 0x5d, 0x45, 0x62, 0xc3, 0x70,
	0x14, 0x28, 0xe1, 0xb2, 0xf2, 0x64, 0x22, 0xd9, 0x3b, 0xd7, 0x90, 0xd8, 0xf2, 0x41, 0xe7, 0x08,
	0x5f, 0xc0, 0x76, 0x08, 0xe4, 0x4b, 0x2b, 0x2e, 0x64, 0xa6, 0x56, 0x7a, 0x52, 0x29, 0xdf, 0xbd,
	0xef, 0x1e, 0xf8, 0xcb, 0x4e, 0x66, 0x6a, 0xa3, 0x17, 0x9d, 0x5a, 0x75, 0xde, 0xf2, 0xa7, 0xbd,
	0xcc, 0xd4, 0x56, 0xcf, 0x12, 0xdf, 0xc2, 0x95, 0x6b, 0x43, 0xf4, 0x43, 0x43, 0x6d, 0xfc, 0xe1,
	0xac, 0x00, 0x5e, 0x7a, 0x38, 0xc1, 0xd2, 0xe2, 0x7b, 0x38, 0x9e, 0xfd, 0xd4, 0x9a, 0x86, 0xc4,
	0xa5, 0xcc, 0xd4, 0x5e, 0x17, 0x27, 0xfc, 0xc5, 0x34, 0x94, 0xce, 0x89, 0xde, 0x58, 0x2a, 0xad,
	0x38, 0xf0, 0x9e, 0x59, 0xe2, 0x2b, 0xd8, 0xf3, 0x18, 0x9c, 0x25, 0x71, 0xc5, 0xf1, 0x4e, 0x00,
	0xdf, 0x41, 0xd1, 0xf5, 0x7d, 0x17, 0x5c, 0xa4, 0xef, 0x63, 0xb7, 0x82, 0xed, 0x4f, 0x28, 0x7e,
	0x80, 0xeb, 0x99, 0x7c, 0x9a, 0xbb, 0x1e, 0x79, 0xd9, 0x7f, 0x1c, 0x15, 0x1c, 0x67, 0xf6, 0x75,
	0xea, 0x7e, 0xcd, 0xdd, 0x9f, 0xe2, 0x94, 0x8d, 0xaf, 0xe3, 0x5b, 0xca, 0xf6, 0x6c, 0xcc, 0xb6,
	0x80, 0xd4, 0x89, 0x7e, 0xf3, 0x3d, 0x08, 0x1c, 0x3b, 0x4d, 0x32, 0xf9, 0x78, 0xe4, 0x47, 0x7f,
	0x3e, 0xfa, 0x16, 0x90, 0xde, 0xc9, 0x85, 0xcf, 0xa6, 0xae, 0xc4, 0x8d, 0xcc, 0xd5, 0x4e, 0x4f,
	0xea, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xea, 0x5b, 0x07, 0xd3, 0x8f, 0x02, 0x00, 0x00,
}
