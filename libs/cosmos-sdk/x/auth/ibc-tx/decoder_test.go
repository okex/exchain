package tx

import (
	"encoding/hex"
	"testing"

	okexchaincodec "github.com/okex/exchain/app/codec"
	"github.com/okex/exchain/libs/cosmos-sdk/codec"
	"github.com/okex/exchain/libs/cosmos-sdk/types/module"
	ibctransfer "github.com/okex/exchain/libs/ibc-go/modules/apps/transfer"
	ibc "github.com/okex/exchain/libs/ibc-go/modules/core"
	"github.com/stretchr/testify/require"
)

func TestIbcTxDecoderSuccess(t *testing.T) {
	ModuleBasics := module.NewBasicManager(
		ibc.AppModuleBasic{},
		ibctransfer.AppModuleBasic{},
	)
	cdc := okexchaincodec.MakeCodec(ModuleBasics)
	interfaceReg := okexchaincodec.MakeIBC(ModuleBasics)
	protoCodec := codec.NewProtoCodec(interfaceReg)
	codecProxy := codec.NewCodecProxy(protoCodec, cdc)
	cpcdc := &codec.CompoundCodec{
		cdc,
		codecProxy,
	}
	marshaler := cpcdc.GetProtocMarshal()
	decode := IbcTxDecoder(marshaler)
	var err error
	txBytes1, err := hex.DecodeString("0a8c030a89030a232f6962632e636f72652e636c69656e742e76312e4d7367437265617465436c69656e7412e1020aaa010a2b2f6962632e6c69676874636c69656e74732e74656e6465726d696e742e76312e436c69656e745374617465127b0a056962632d311204080110031a040880ac4d22040880df6e2a0308d80432003a040801102142190a090801180120012a0100120c0a02000110211804200c300142190a090801180120012a0100120c0a02000110201801200130014a07757067726164654a1075706772616465644942435374617465500158011286010a2e2f6962632e6c69676874636c69656e74732e74656e6465726d696e742e76312e436f6e73656e737573537461746512540a0c08a2eb9992061080a4b1b60312220a206c4821c63adcb62c57effb912d6d568f8971456acf6630c5b3677c8d3cd999321a203ee89cb19deef923d4ffea8d44980336746dd0125d7372f9a78562a8aaf0fb821a296578316865756b7866766d74617968306a7a746468706e73756468677a666d3364783772357261753412370a290a210a1f2f636f736d6f732e63727970746f2e736563703235366b312e5075624b657912040a020801120a0a080a036f6b741201301a00")
	require.NoError(t, err)
	_, err = decode(txBytes1)
	require.NoError(t, err)

	txBytes2, err := hex.DecodeString("0a8c030a89030a232f6962632e636f72652e636c69656e742e76312e4d7367437265617465436c69656e7412e1020aaa010a2b2f6962632e6c69676874636c69656e74732e74656e6465726d696e742e76312e436c69656e745374617465127b0a056962632d311204080110031a040880ac4d22040880df6e2a0308d80432003a040801102142190a090801180120012a0100120c0a02000110211804200c300142190a090801180120012a0100120c0a02000110201801200130014a07757067726164654a1075706772616465644942435374617465500158011286010a2e2f6962632e6c69676874636c69656e74732e74656e6465726d696e742e76312e436f6e73656e737573537461746512540a0c08a2eb9992061080a4b1b60312220a206c4821c63adcb62c57effb912d6d568f8971456acf6630c5b3677c8d3cd999321a203ee89cb19deef923d4ffea8d44980336746dd0125d7372f9a78562a8aaf0fb821a296578316865756b7866766d74617968306a7a746468706e73756468677a666d3364783772357261753412600a4e0a460a1f2f636f736d6f732e63727970746f2e736563703235366b312e5075624b657912230a2102d65cc353cc87a96d93a40fd892d866d85a2f51f83dbedacfdf40b6cb5c42a14512040a020801120e0a080a036f6b74120131109da8081a404fe53171e48381b2b799651910ae49bdd0cf3a2b63bc9ff56bc243197b7395a672242e9c07a3ce904bce09118dbd1830955e5e4f6272b9ea8dc2a22be24120ff")
	require.NoError(t, err)
	_, err = decode(txBytes2)
	require.NoError(t, err)

	txBytes3, err := hex.DecodeString("0af4080ae7070a232f6962632e636f72652e636c69656e742e76312e4d7367557064617465436c69656e7412bf070a0f30372d74656e6465726d696e742d301280070a262f6962632e6c69676874636c69656e74732e74656e6465726d696e742e76312e48656164657212d5060ac6040a8a030a02080b12056962632d311823220b08a5eb99920610c0f19c6e2a480a20629665f068bb27c518e135e3b830759d7dbbb4b57bc77671de22b6baae690e911224080112203729aa9acb11d1ca83dff915dc0f98d7ae71958422c239c3b1b50f0cc6a2f90c322082e4414794afbce9acad186181a52d26960917b5b042713c7a6207a91d31720f3a2017ed596fab8c5fa97aeec4e927b6099ba7b1b70e09baa9d10e819f749b7f35ec42203ee89cb19deef923d4ffea8d44980336746dd0125d7372f9a78562a8aaf0fb824a203ee89cb19deef923d4ffea8d44980336746dd0125d7372f9a78562a8aaf0fb825220048091bc7ddc283f77bfbf91d73c44da58c3df8a9cbc867405d8b7f3daada22f5a20748be931993627eb285a0eae322aa3595a4337578abd499ec0af1a83f38307ea6220e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b8556a20e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b85572148bbcac9722c1a67a9c7517ad320f9c547bdf1a7512b60108231a480a20f482ea7b50914243a41fbcbee704ee17b7b268cee54519fd94ca66b1cc0f59241224080112208008d042c3261bc12e3007cfcc32e0cd9246c36a1f82fcdd4c1c3a0ff714437f2268080212148bbcac9722c1a67a9c7517ad320f9c547bdf1a751a0c08a6eb9992061090f1c9c20122404b2117e0b4d41912726a03a9179425d61c82114c80b5fbdf0542bb7bfde5278843e148bce5246e957877ecba92df1b81bd5d46e5c8e03bb5bed2f91fc0c5020b1280010a3e0a148bbcac9722c1a67a9c7517ad320f9c547bdf1a7512220a208ad3e4b95873ec49c803d52bddff903b50f72faf5878dc26e55e5f62dfea32fa18a08d06123e0a148bbcac9722c1a67a9c7517ad320f9c547bdf1a7512220a208ad3e4b95873ec49c803d52bddff903b50f72faf5878dc26e55e5f62dfea32fa18a08d061a04080110212280010a3e0a148bbcac9722c1a67a9c7517ad320f9c547bdf1a7512220a208ad3e4b95873ec49c803d52bddff903b50f72faf5878dc26e55e5f62dfea32fa18a08d06123e0a148bbcac9722c1a67a9c7517ad320f9c547bdf1a7512220a208ad3e4b95873ec49c803d52bddff903b50f72faf5878dc26e55e5f62dfea32fa18a08d061a296578316865756b7866766d74617968306a7a746468706e73756468677a666d336478377235726175340a87010a2d2f6962632e636f72652e636f6e6e656374696f6e2e76312e4d7367436f6e6e656374696f6e4f70656e496e697412560a0f30372d74656e6465726d696e742d3012180a0f30372d74656e6465726d696e742d301a050a036962632a296578316865756b7866766d74617968306a7a746468706e73756468677a666d3364783772357261753412390a2b0a210a1f2f636f736d6f732e63727970746f2e736563703235366b312e5075624b657912040a0208011801120a0a080a036f6b741201301a00")
	require.NoError(t, err)
	_, err = decode(txBytes3)
	require.NoError(t, err)

	txBytes4, err := hex.DecodeString("0af4080ae7070a232f6962632e636f72652e636c69656e742e76312e4d7367557064617465436c69656e7412bf070a0f30372d74656e6465726d696e742d301280070a262f6962632e6c69676874636c69656e74732e74656e6465726d696e742e76312e48656164657212d5060ac6040a8a030a02080b12056962632d311823220b08a5eb99920610c0f19c6e2a480a20629665f068bb27c518e135e3b830759d7dbbb4b57bc77671de22b6baae690e911224080112203729aa9acb11d1ca83dff915dc0f98d7ae71958422c239c3b1b50f0cc6a2f90c322082e4414794afbce9acad186181a52d26960917b5b042713c7a6207a91d31720f3a2017ed596fab8c5fa97aeec4e927b6099ba7b1b70e09baa9d10e819f749b7f35ec42203ee89cb19deef923d4ffea8d44980336746dd0125d7372f9a78562a8aaf0fb824a203ee89cb19deef923d4ffea8d44980336746dd0125d7372f9a78562a8aaf0fb825220048091bc7ddc283f77bfbf91d73c44da58c3df8a9cbc867405d8b7f3daada22f5a20748be931993627eb285a0eae322aa3595a4337578abd499ec0af1a83f38307ea6220e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b8556a20e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b85572148bbcac9722c1a67a9c7517ad320f9c547bdf1a7512b60108231a480a20f482ea7b50914243a41fbcbee704ee17b7b268cee54519fd94ca66b1cc0f59241224080112208008d042c3261bc12e3007cfcc32e0cd9246c36a1f82fcdd4c1c3a0ff714437f2268080212148bbcac9722c1a67a9c7517ad320f9c547bdf1a751a0c08a6eb9992061090f1c9c20122404b2117e0b4d41912726a03a9179425d61c82114c80b5fbdf0542bb7bfde5278843e148bce5246e957877ecba92df1b81bd5d46e5c8e03bb5bed2f91fc0c5020b1280010a3e0a148bbcac9722c1a67a9c7517ad320f9c547bdf1a7512220a208ad3e4b95873ec49c803d52bddff903b50f72faf5878dc26e55e5f62dfea32fa18a08d06123e0a148bbcac9722c1a67a9c7517ad320f9c547bdf1a7512220a208ad3e4b95873ec49c803d52bddff903b50f72faf5878dc26e55e5f62dfea32fa18a08d061a04080110212280010a3e0a148bbcac9722c1a67a9c7517ad320f9c547bdf1a7512220a208ad3e4b95873ec49c803d52bddff903b50f72faf5878dc26e55e5f62dfea32fa18a08d06123e0a148bbcac9722c1a67a9c7517ad320f9c547bdf1a7512220a208ad3e4b95873ec49c803d52bddff903b50f72faf5878dc26e55e5f62dfea32fa18a08d061a296578316865756b7866766d74617968306a7a746468706e73756468677a666d336478377235726175340a87010a2d2f6962632e636f72652e636f6e6e656374696f6e2e76312e4d7367436f6e6e656374696f6e4f70656e496e697412560a0f30372d74656e6465726d696e742d3012180a0f30372d74656e6465726d696e742d301a050a036962632a296578316865756b7866766d74617968306a7a746468706e73756468677a666d3364783772357261753412620a500a460a1f2f636f736d6f732e63727970746f2e736563703235366b312e5075624b657912230a2102d65cc353cc87a96d93a40fd892d866d85a2f51f83dbedacfdf40b6cb5c42a14512040a0208011801120e0a080a036f6b7412013110aff1091a4060180307b766d3a858f19e4f4401e4dd8d28c80f71ce648d1fc8399a82acda5e7ccbfbfbd72f38e11a63f26c4aeaccb600bb7b82ce1f81ce30a7e38b08843543")
	require.NoError(t, err)
	_, err = decode(txBytes4)
	require.NoError(t, err)
}

func TestIbcTxDecoderFailure(t *testing.T) {
	ModuleBasics := module.NewBasicManager(
		ibc.AppModuleBasic{},
		ibctransfer.AppModuleBasic{},
	)
	cdc := okexchaincodec.MakeCodec(ModuleBasics)
	interfaceReg := okexchaincodec.MakeIBC(ModuleBasics)
	protoCodec := codec.NewProtoCodec(interfaceReg)
	codecProxy := codec.NewCodecProxy(protoCodec, cdc)
	cpcdc := &codec.CompoundCodec{
		cdc,
		codecProxy,
	}

	txBytes, err := hex.DecodeString("7261753412370a290a210a1f2f636f736d6f732e637")

	marshaler := cpcdc.GetProtocMarshal()
	decode := IbcTxDecoder(marshaler)
	_, err = decode(txBytes)
	require.EqualError(t, err, "tx parse error: invalid length; unexpected EOF")
}
